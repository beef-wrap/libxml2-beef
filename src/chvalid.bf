/*
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character
 *               range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
 */

using System;
using System.Interop;

namespace libxml2;

extension libxml2
{
	/*
	* Define our typedefs and structures
	*
	*/
	public typealias xmlChSRangePtr = xmlChSRange*;

	[CRepr]
	public struct xmlChSRange
	{
		c_ushort low;
		c_ushort high;
	}

	public typealias xmlChLRangePtr = xmlChLRange*;

	[CRepr]
	public struct xmlChLRange
	{
		c_uint low;
		c_uint high;
	}

	public typealias xmlChRangeGroupPtr = xmlChRangeGroup*;

	[CRepr]
	public struct xmlChRangeGroup
	{
		c_int nbShortRange;
		c_int nbLongRange;
		xmlChSRange	* shortRange; /* points to an array of ranges */
		xmlChLRange	* longRange;
	}

	/**
	* Range checking routine
	*/
	[CLink] public static extern c_int xmlCharInRange(c_uint val, xmlChRangeGroup* group);


	/**
	* xmlIsBaseChar_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsBaseChar_ch(c)	(((0x41 <= (c)) && ((c) <= 0x5a)) || \
	// 				 ((0x61 <= (c)) && ((c) <= 0x7a)) || \
	// 				 ((0xc0 <= (c)) && ((c) <= 0xd6)) || \
	// 				 ((0xd8 <= (c)) && ((c) <= 0xf6)) || \
	// 				  (0xf8 <= (c)))

	/**
	* xmlIsBaseCharQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsBaseCharQ(c)	(((c) < 0x100) ? \
	// 				 xmlIsBaseChar_ch((c)) : \
	// 				 xmlCharInRange((c), &xmlIsBaseCharGroup))

	// XMLPUBVAR xmlChRangeGroup xmlIsBaseCharGroup;

	/**
	* xmlIsBlank_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsBlank_ch(c)	(((c) == 0x20) || \
	// 				 ((0x9 <= (c)) && ((c) <= 0xa)) || \
	// 				 ((c) == 0xd))

	/**
	* xmlIsBlankQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsBlankQ(c)		(((c) < 0x100) ? \
	// 				 xmlIsBlank_ch((c)) : 0)


	/**
	* xmlIsChar_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsChar_ch(c)		(((0x9 <= (c)) && ((c) <= 0xa)) || \
	// 				 ((c) == 0xd) || \
	// 				  (0x20 <= (c)))

	/**
	* xmlIsCharQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsCharQ(c)		(((c) < 0x100) ? \
	// 				 xmlIsChar_ch((c)) :\
	// 				(((0x100 <= (c)) && ((c) <= 0xd7ff)) || \
	// 				 ((0xe000 <= (c)) && ((c) <= 0xfffd)) || \
	// 				 ((0x10000 <= (c)) && ((c) <= 0x10ffff))))

	// XMLPUBVAR xmlChRangeGroup xmlIsCharGroup;

	/**
	* xmlIsCombiningQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsCombiningQ(c)	(((c) < 0x100) ? \
	// 				 0 : \
	// 				 xmlCharInRange((c), &xmlIsCombiningGroup))

	// XMLPUBVAR xmlChRangeGroup xmlIsCombiningGroup;

	/**
	* xmlIsDigit_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsDigit_ch(c)	(((0x30 <= (c)) && ((c) <= 0x39)))

	/**
	* xmlIsDigitQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsDigitQ(c)		(((c) < 0x100) ? \
	// 				 xmlIsDigit_ch((c)) : \
	// 				 xmlCharInRange((c), &xmlIsDigitGroup))

	// XMLPUBVAR xmlChRangeGroup xmlIsDigitGroup;

	/**
	* xmlIsExtender_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsExtender_ch(c)	(((c) == 0xb7))

	/**
	* xmlIsExtenderQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsExtenderQ(c)	(((c) < 0x100) ? \
	// 				 xmlIsExtender_ch((c)) : \
	// 				 xmlCharInRange((c), &xmlIsExtenderGroup))

	// XMLPUBVAR xmlChRangeGroup xmlIsExtenderGroup;

	/**
	* xmlIsIdeographicQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsIdeographicQ(c)	(((c) < 0x100) ? \
	// 				 0 :\
	// 				(((0x4e00 <= (c)) && ((c) <= 0x9fa5)) || \
	// 				 ((c) == 0x3007) || \
	// 				 ((0x3021 <= (c)) && ((c) <= 0x3029))))

	// XMLPUBVAR xmlChRangeGroup xmlIsIdeographicGroup;
	// XMLPUBVAR c_uchar xmlIsPubidChar_tab[256];

	/**
	* xmlIsPubidChar_ch:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsPubidChar_ch(c)	(xmlIsPubidChar_tab[(c)])

	/**
	* xmlIsPubidCharQ:
	* @c: char to validate
	*
	* Automatically generated by genChRanges.py
	*/
	// #define xmlIsPubidCharQ(c)	(((c) < 0x100) ? \
	// 				 xmlIsPubidChar_ch((c)) : 0)

	[CLink] public static extern c_int xmlIsBaseChar(c_uint ch);
	[CLink] public static extern c_int xmlIsBlank(c_uint ch);
	[CLink] public static extern c_int xmlIsChar(c_uint ch);
	[CLink] public static extern c_int xmlIsCombining(c_uint ch);
	[CLink] public static extern c_int xmlIsDigit(c_uint ch);
	[CLink] public static extern c_int xmlIsExtender(c_uint ch);
	[CLink] public static extern c_int xmlIsIdeographic(c_uint ch);
	[CLink] public static extern c_int xmlIsPubidChar(c_uint ch);
}